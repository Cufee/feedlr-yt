datasource db {
  url      = env("DATABASE_URL")
  provider = "mongodb"
  // relationMode = "prisma"
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  authId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  views         VideoView[]
  settings      UserSettings?
  subscriptions UserSubscription[]

  @@map("users")
}

model UserSettings {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  sponsorBlockEnabled    Boolean  @default(true)
  sponsorBlockCategories String[] @default([])

  @@map("user_settings")
}

model Channel {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url         String
  title       String
  thumbnail   String?
  description String  @db.String

  videos        Video[]
  subscriptions UserSubscription[]

  @@map("channels")
}

model Video {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url         String
  title       String
  duration    Int     @default(0)
  thumbnail   String?
  description String  @db.String

  views     VideoView[]
  channel   Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  @@index([channelId], name: "channelId")
  @@map("videos")
}

model VideoView {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  progress Int @default(0)

  @@index([userId], name: "userId")
  @@index([videoId], name: "videoId")
  @@index([userId, videoId], name: "userId_videoId")
  @@map("video_views")
}

model UserSubscription {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isFavorite Boolean @default(false)

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  @@index([userId], name: "userId")
  @@index([channelId], name: "channelId")
  @@index([userId, channelId], name: "userId_channelId")
  @@map("user_subscriptions")
}

model AuthNonce {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())

  expiresAt DateTime
  value     String

  @@unique([expiresAt, value], name: "expiresAt_value")
  @@index([expiresAt], name: "expiresAt")
  @@index([value], name: "value")
  @@map("auth_nonces")
}
