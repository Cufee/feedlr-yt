// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package api

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/cufee/feedlr-yt/internal/logic"
	"github.com/cufee/feedlr-yt/internal/server/handler"
	"github.com/cufee/feedlr-yt/internal/templates/components/subscriptions"
	"github.com/cufee/tpot/brewed"
	"net/http"
)

var SearchChannels brewed.Partial[*handler.Context] = func(ctx *handler.Context) (templ.Component, error) {
	userID, ok := ctx.UserID()
	if !ok {
		return nil, ctx.SendStatus(http.StatusUnauthorized)
	}

	query := ctx.Query("search")
	if len(query) < 3 || len(query) > 32 {
		if len(query) == 0 {
			return nil, nil
		}
		return channelsSearchErrorMessage("Channel name must be between 3 and 32 characters long"), nil
	}

	channels, err := logic.SearchChannels(ctx.Context(), ctx.Database(), ctx.Piped, userID, query, 4)
	if err != nil {
		return nil, ctx.Err(err)
	}
	if len(channels) == 0 {
		return channelsSearchErrorMessage(fmt.Sprintf("Didn't find any channels named %s", query)), nil
	}

	return subscriptions.SearchResultChannels(channels), nil
}

func channelsSearchErrorMessage(message string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"m-auto text-2xl\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(message)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/server/routes/api/channels.templ`, Line: 38, Col: 39}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var CreateSubscription brewed.Partial[*handler.Context] = func(ctx *handler.Context) (templ.Component, error) {
	userID, ok := ctx.UserID()
	if !ok {
		return nil, ctx.SendStatus(http.StatusUnauthorized)
	}

	channelId := ctx.Params("id")
	props, err := logic.NewSubscription(ctx.Context(), ctx.Database(), ctx.Piped, userID, channelId)
	if err != nil {
		return nil, err
	}

	if ctx.Query("type") == "button" {
		return subscriptions.UnsubscribeButtonSmall(props.ID), nil
	}
	return subscriptions.SubscribedChannelTile(*props), nil
}

var RemoveSubscription brewed.Partial[*handler.Context] = func(ctx *handler.Context) (templ.Component, error) {
	userID, ok := ctx.UserID()
	if !ok {
		return nil, ctx.SendStatus(http.StatusUnauthorized)
	}

	channelId := ctx.Params("id")
	err := logic.DeleteSubscription(ctx.Context(), ctx.Database(), userID, channelId)
	if err != nil {
		return nil, err
	}

	if ctx.Query("type") == "button" {
		return subscriptions.SubscribeButtonSmall(channelId), nil
	}

	return nil, ctx.SendStatus(http.StatusOK)
}
