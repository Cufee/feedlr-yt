package api

import (
	"fmt"
	"github.com/cufee/feedlr-yt/internal/logic"
	"github.com/cufee/feedlr-yt/internal/server/handler"
	"github.com/cufee/feedlr-yt/internal/templates/components/subscriptions"
	"github.com/cufee/tpot/brewed"
	"net/http"
)

var SearchChannels brewed.Partial[*handler.Context] = func(ctx *handler.Context) (templ.Component, error) {
	userID, ok := ctx.UserID()
	if !ok {
		return nil, ctx.SendStatus(http.StatusUnauthorized)
	}

	query := ctx.Query("search")
	if len(query) < 3 || len(query) > 32 {
		if len(query) == 0 {
			return nil, nil
		}
		return channelsSearchErrorMessage("Channel name must be between 3 and 32 characters long"), nil
	}

	channels, err := logic.SearchChannels(ctx.Context(), ctx.Database(), ctx.Piped, userID, query, 4)
	if err != nil {
		return nil, ctx.Err(err)
	}
	if len(channels) == 0 {
		return channelsSearchErrorMessage(fmt.Sprintf("Didn't find any channels named %s", query)), nil
	}

	return subscriptions.SearchResultChannels(channels), nil
}

templ channelsSearchErrorMessage(message string) {
	<div class="m-auto text-2xl">{ message }</div>
}

var CreateSubscription brewed.Partial[*handler.Context] = func(ctx *handler.Context) (templ.Component, error) {
	userID, ok := ctx.UserID()
	if !ok {
		return nil, ctx.SendStatus(http.StatusUnauthorized)
	}

	channelId := ctx.Params("id")
	props, err := logic.NewSubscription(ctx.Context(), ctx.Database(), ctx.Piped, userID, channelId)
	if err != nil {
		return nil, err
	}

	if ctx.Query("type") == "button" {
		return subscriptions.UnsubscribeButtonSmall(props.ID), nil
	}
	return subscriptions.SubscribedChannelTile(*props), nil
}

var RemoveSubscription brewed.Partial[*handler.Context] = func(ctx *handler.Context) (templ.Component, error) {
	userID, ok := ctx.UserID()
	if !ok {
		return nil, ctx.SendStatus(http.StatusUnauthorized)
	}

	channelId := ctx.Params("id")
	err := logic.DeleteSubscription(ctx.Context(), ctx.Database(), userID, channelId)
	if err != nil {
		return nil, err
	}

	if ctx.Query("type") == "button" {
		return subscriptions.SubscribeButtonSmall(channelId), nil
	}

	return nil, ctx.SendStatus(http.StatusOK)
}
