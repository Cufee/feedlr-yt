package feed

import "fmt"
import "github.com/cufee/feedlr-yt/internal/types"
import "github.com/cufee/feedlr-yt/internal/templates/components/icons"

templ VideoFeed(videos []types.VideoProps) {
	<div class="relative flex w-full gap-1 p-0 space-x-2 overflow-x-scroll shadow-inner md:space-x-4 carousel carousel-center rounded-box" id="components-video-feed">
		for _, video := range videos {
			@VideoTile(video)
		}
	</div>
}

templ VideoTile(video types.VideoProps) {
	<div class="relative overflow-hidden shadow-md video-tile carousel-item rounded-xl overscroll-contain" id={ fmt.Sprintf("video-tile-%s", video.ID) } >
		if video.Progress < 1 {
			<button class="absolute z-10 btn btn-dark btn-square opacity-70 hover:opacity-100 md:btn-sm top-2 right-2" title="Mark as watched" hx-post={ fmt.Sprintf("/api/videos/%s/progress?progress=%v", video.ID, video.Duration+1) } hx-swap="outerHTML" hx-target={ fmt.Sprintf("#video-tile-%s", video.ID) } hx-indicator={ fmt.Sprintf("#video-tile-%s-indicator", video.ID) }>
			  @icons.Check()
			</button>
		} else {
			<button class="absolute z-20 btn btn-dark btn-square opacity-70 hover:opacity-100 md:btn-sm top-2 right-2" title="Mark as unwatched" hx-post={ fmt.Sprintf("/api/videos/%s/progress?progress=0", video.ID) } hx-swap="outerHTML" hx-target={ fmt.Sprintf("#video-tile-%s", video.ID) } hx-indicator={ fmt.Sprintf("#video-tile-%s-indicator", video.ID) }>
				@icons.Refresh()
			</button>
		}
		<a href={ templ.URL(fmt.Sprintf("/video/%s", video.ID)) } hx-boost="true" hx-target="body" class="relative group">
			<div class="absolute z-20 top-2 left-2 htmx-indicator" id={ fmt.Sprintf("video-tile-%s-indicator", video.ID) }>
				<span class="loading loading-spinner loading-lg md:loading-sm"></span>
			</div>
			if video.Progress > 0 {
				<div class="absolute top-0 left-0 z-10 flex items-center justify-center w-full h-full text-4xl font-bold uppercase bg-black opacity-70 md:text-6xl">Watched</div>
			}
			<div class="cursor-pointer aspect-video h-44 md:h-60 ">
				<img class="z-10 hidden object-cover w-full h-full transition-all duration-500 group-hover:scale-110" src={ video.Thumbnail } alt={ video.Title } onload="this.style.display=&#39;block&#39;" />
				<div class="absolute w-full h-full bg-base-100 animate-pulse" />
			</div>
			<div class="absolute bottom-0 left-0 z-10 flex flex-col w-full gap-1 bg-black md:hidden group-hover:inline-block animate__faster bg-opacity-60 animate__animated animate__slideInUp">
				<div class="px-2 py-1 font-bold text-center text-white truncate">
					{ video.Title }
				</div>
			</div>
			if video.Progress > 0 && video.Duration > 0 {
				<progress class="absolute bottom-0 left-0 z-10 w-full h-1 progress progress-primary" value={ fmt.Sprint(video.Progress) } max={ fmt.Sprint(video.Duration) }></progress>
			}
		</a>
	</div>
}