package feed

import (
	"fmt"
	"github.com/cufee/feedlr-yt/internal/templates/components/icons"
	"github.com/cufee/feedlr-yt/internal/types"
	"github.com/cufee/feedlr-yt/internal/utils"
	"time"
)

templ VideoFeed(videos []types.VideoProps, returnUrl string, withProgressActions, withChannelName bool) {
	<div class="relative grid w-full grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2 md:grid-cols-3" id="components-video-feed">
		for _, video := range videos {
			<div class="flex flex-col gap-1">
				<a href={ templ.URL(fmt.Sprintf("/video/%s?return=%s", video.ID, returnUrl)) } hx-boost="true" hx-target="body" class="relative flex flex-col w-full cursor-pointer h-fit rounded-box group">
					@VideoCard(video, true, withProgressActions)
				</a>
				<div class="flex flex-col">
					<span class="overflow-hidden text-lg leading-tight truncate whitespace-normal line-clamp-2" style="overflow-wrap: anywhere;" title={ video.Title }>
						{ video.Title }
					</span>
					<div class="flex flex-col">
						if withChannelName {
							<a href={ templ.URL(fmt.Sprintf("/channel/%s", video.Channel.ID)) } class="overflow-hidden text-gray-500 truncate text-md w-fit" hx-boost="true" hx-target="body" title={ video.Channel.Title }>
								{ video.Channel.Title }
							</a>
						}
						<span class="text-sm text-gray-500 w-fit">
							{ formatTimestamp(video.PublishedAt) }
						</span>
					</div>
				</div>
			</div>
		}
	</div>
}

templ VideoCarousel(videos []types.VideoProps) {
	<div class="relative flex w-full gap-1 p-0 space-x-2 overflow-x-scroll shadow-inner md:space-x-4 carousel carousel-center rounded-box" id="components-video-carousel">
		for _, video := range videos {
			<div class="h-44 md:h-60 aspect-video">
				@VideoTileWithTitle(video)
			</div>
		}
	</div>
}

templ VideoThumbnail(videoID, alt string) {
	<div class="relative z-10 overflow-hidden">
		<object tabindex="-1" class="object-cover w-full h-full transition-all duration-500 group-hover:scale-110" data={ fmt.Sprintf("https://i.ytimg.com/vi/%s/maxresdefault.jpg", videoID) } type="image/jpeg">
			<img class="object-cover w-full h-full transition-all duration-500 group-hover:scale-110" src={ fmt.Sprintf("https://i.ytimg.com/vi/%s/0.jpg", videoID) } alt={ alt }/>
		</object>
		<div class="absolute w-full h-full bg-base-100 animate-pulse"></div>
	</div>
}

templ VideoCard(video types.VideoProps, showProgress, progressActions bool) {
	<div class="relative overflow-hidden rounded-lg aspect-video" id={ fmt.Sprintf("video-card-%s", video.ID) }>
		if showProgress {
			<div class="absolute z-20 top-2 left-2 htmx-indicator" id={ fmt.Sprintf("video-card-%s-indicator", video.ID) }>
				<span class="loading loading-spinner loading-lg md:loading-sm"></span>
			</div>
			if video.Progress > 0 {
				if progressActions {
					<button _="on click halt" class="absolute z-20 btn btn-dark btn-square opacity-70 hover:opacity-100 md:btn-sm top-2 right-2" title="Mark as unwatched" hx-post={ fmt.Sprintf("/api/videos/%s/progress?progress=0", video.ID) } hx-swap="outerHTML" hx-target={ fmt.Sprintf("#video-card-%s", video.ID) } hx-indicator={ fmt.Sprintf("#video-card-%s-indicator", video.ID) }>
						@icons.Refresh()
					</button>
				}
				<div class="absolute top-0 left-0 z-10 flex items-center justify-center w-full h-full text-4xl font-bold uppercase bg-black opacity-70 md:text-4xl">Watched</div>
				<progress class="absolute bottom-0 left-0 z-10 w-full h-1 progress progress-primary" value={ fmt.Sprint(video.Progress) } max={ fmt.Sprint(utils.MaxInt(video.Duration, video.Progress)) }></progress>
			} else if progressActions {
				<button _="on click halt" class="absolute z-20 btn btn-dark btn-square opacity-70 hover:opacity-100 md:btn-sm top-2 right-2" title="Mark as watched" hx-post={ fmt.Sprintf("/api/videos/%s/progress?progress=%v", video.ID, video.Duration+1) } hx-swap="outerHTML" hx-target={ fmt.Sprintf("#video-card-%s", video.ID) } hx-indicator={ fmt.Sprintf("#video-card-%s-indicator", video.ID) }>
					@icons.Check()
				</button>
			}
		}
		<div class="absolute z-30 flex items-center justify-center gap-1 px-1 text-sm bg-black bg-opacity-50 rounded-md bottom-2 right-2">
			if video.Type == "live_stream" {
				<div class="w-2 h-2 bg-red-500 rounded-full"></div> LIVE
			} else if video.Type == "upcoming_stream" {
				<div class="w-2 h-2 bg-gray-500 rounded-full"></div> OFFLINE
			} else {
				{ secondsToDurationString(video.Duration) }
			}
		</div>
		@VideoThumbnail(video.ID, video.Title)
	</div>
}

templ VideoTile(video types.VideoProps) {
	<div class="relative overflow-hidden video-tile rounded-xl">
		<a href={ templ.URL(fmt.Sprintf("/video/%s", video.ID)) } hx-boost="true" hx-target="body" class="relative group">
			@VideoCard(video, true, true)
		</a>
	</div>
}

templ VideoTileWithTitle(video types.VideoProps) {
	<div class="relative overflow-hidden shadow-md group carousel-item rounded-xl w-fit" id={ fmt.Sprintf("video-tile-%s", video.ID) }>
		@VideoTile(video)
		<div class="absolute bottom-0 left-0 z-10 flex flex-col w-full gap-1 bg-black md:hidden group-hover:inline-block animate__faster bg-opacity-60 animate__animated animate__slideInUp">
			<div class="px-2 py-1 font-bold text-center text-white truncate">
				{ video.Title }
			</div>
		</div>
	</div>
}

func secondsToDurationString(seconds int) string {
	if seconds == 0 {
		return ""
	}
	hours := seconds / 3600
	minutes := (seconds % 3600) / 60
	seconds = seconds % 60
	if hours == 0 {
		return fmt.Sprintf("%02d:%02d", minutes, seconds)
	}
	return fmt.Sprintf("%02d:%02d:%02d", hours, minutes, seconds)
}

func formatTimestamp(timestamp string) string {
	if timestamp == "" {
		return ""
	}

	published, err := time.Parse(time.RFC3339, timestamp)
	if err != nil {
		return ""
	}

	now := time.Now()
	diff := now.Sub(published)

	if diff < time.Minute {
		return "Just now"
	} else if diff < time.Hour {
		return fmt.Sprintf("%d minutes ago", int(diff.Minutes()))
	} else if diff < time.Hour*24 {
		return fmt.Sprintf("%d hours ago", int(diff.Hours()))
	} else if diff < time.Hour*24*7 {
		return fmt.Sprintf("%d days ago", int(diff.Hours()/24))
	} else if diff < time.Hour*24*30 {
		return fmt.Sprintf("%d weeks ago", int(diff.Hours()/24/7))
	} else if diff < time.Hour*24*365 {
		return fmt.Sprintf("%d months ago", int(diff.Hours()/24/30))
	} else {
		return fmt.Sprintf("%d years ago", int(diff.Hours()/24/365))
	}
}
