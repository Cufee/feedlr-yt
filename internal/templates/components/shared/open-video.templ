package shared

import "fmt"

templ OpenVideoButton() {
	<div class="flex justify-center">
		<div class="flex flex-row gap-2">
			<button id="open_video_modal_btn" class="btn btn-ghost">
				Open a YouTube Video
			</button>
		</div>
		<dialog id="open_video_modal" class="bg-black bg-opacity-50 modal modal-top lg:modal-middle">
			<div class="flex flex-col items-center justify-center gap-4 lg:!bg-transparent modal-box group" id="open_video_modal_box">
				<div class="flex flex-col items-center justify-center w-full">
					@OpenVideoInput("", true)
				</div>
				<div class="hidden lg:block">
					Press <kbd class="kbd kbd-sm">Enter</kbd> to open this window and <kbd class="kbd kbd-sm">Esc</kbd> to close it.
				</div>
			</div>
			<form method="dialog" class="modal-backdrop">
				<button id="open_video_close">close</button>
			</form>
		</dialog>
		@EmbedScript(openVideoModalScript())
	</div>
}

templ OpenVideoInput(url string, valid bool) {
	<form
		class="flex w-full m-0 join"
		id="open_video_modal_form"
		hx-post="/api/videos/open"
		hx-indicator="#open_video_modal"
		hx-target="#open_video_modal_form"
		hx-swap="outerHTML"
		hx-sync="this:replace"
		_="on htmx:beforeRequest
        if #open_video_input.value == ''
          halt"
	>
		<input
			type="text"
			id="open_video_input"
			name="link"
			value={ url }
			placeholder="https://youtube.com/watch..."
			class={ fmt.Sprintf("flex-grow input input-bordered join-item bg-base-200 %s", OptionalClass(!valid, "input-error")) }
		/>
		<button type="submit" class="btn btn-primary join-item">Watch</button>
	</form>
}

script openVideoModalScript() {
	const modal = document.getElementById("open_video_modal");
	const modalBox = document.getElementById("open_video_modal_box");
	const modalButton = document.getElementById("open_video_modal_btn");
	
	const openVideoFromText = async (text) => {
		if (!text) {
			return false;
		}
		try {
			const url = new URL(text);
			let videoId;
			if (url.hostname.endsWith('youtube.com')) {
                videoId = url.searchParams.get('v');
            } else if (url.hostname === 'youtu.be') {
                videoId = url.pathname.slice(1);
			} else if (url.hostname === 'feedlr.app' && url.pathname.includes("/video/")) {
                videoId = url.pathname.split("/video/").pop();
            }
			if (!videoId) {
				throw "no video id found in clipboard";
			}
			window.location.href = "/video/" + videoId;
			return true;
		} catch (_error) {
			return false;
		}
	}
	
	const openModal = () => {
    	const input = modalBox.querySelector("#open_video_input")
    	input.classList.remove("input-error");
    	input.value = "";
		modal.showModal();
    	input.focus();
	}

	// support manually clicking on the button
	modalButton.addEventListener("click", (e) => {
		try {
			const text = await navigator.clipboard.readText();
			if (!openVideoFromText(text)) {
				throw "failed to open a video from clipboard";
			}
		} catch (_error) {
			openModal();
		}
	});
  	document.addEventListener("keydown", (e) => {
		if (e.key === "Enter") {
			if (!modal.open) {
				openVideoOrModal();
			}
		}
	});

	// listen for a global paste event
	document.addEventListener('paste', async (event) => {
		if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
			const text = (event.clipboardData || window.clipboardData).getData('text');
			if (openVideoFromText(text)) {
				event.preventDefault();
			}
		}
	});
}
