package subscriptions

import "fmt"
import "github.com/byvko-dev/youtube-app/internal/types"

templ ChannelTile(channel types.Channel) {
	<div class="flex flex-row items-center h-24 gap-2">
		<img class="object-cover h-full rounded-lg" src={ channel.Thumbnail } alt={ channel.Title }/>
		<div class="box-border flex flex-col justify-center p-2">
			<div class="text-2xl font-bold text-ellipsis">{ channel.Title }</div>
			<div class="truncate whitespace-normal line-clamp-3">
				if channel.Description != "" {
					{ channel.Description }
				} else {
					We don't know much about them, but we're sure they are great.
				}
			</div>
		</div>
	</div>
}

templ SubscribedChannels(channels []types.ChannelProps) {
	for _, channel := range channels {
		<div class="relative flex-grow p-4 overflow-hidden group md:basis-1/3 rounded-xl bg-base-300"
			id={ fmt.Sprintf("sub-channel-tile-%s", channel.ID) }>
			<button type="button"
				class="absolute inset-0 z-10 flex items-center justify-center invisible w-full text-lg font-bold uppercase bg-black bg-opacity-50 group-hover:visible"
				hx-target={ fmt.Sprintf("#sub-channel-tile-%s", channel.ID) } hx-swap="delete" hx-post={ fmt.Sprintf("/api/channels/%s/unsubscribe", channel.ID) }
				_="on htmx:afterRequest send clear to #search-box">
				unsubscribe
			</button>
			@ChannelTile(channel.Channel)
		</div>
	}
}

templ SearchResultChannels(channels []types.ChannelSearchResultProps) {
	for _, channel := range channels {
		<div class="relative flex-grow p-4 overflow-hidden group md:basis-1/3 rounded-xl bg-base-300" id="channel-tile-{{.ID}}">
			if channel.Subscribed {
				<div
					class="absolute inset-0 z-10 flex items-center justify-center w-full text-lg font-bold uppercase bg-black bg-opacity-50 cursor-default">
					Subscribed
				</div>
			} else {
				<button type="button" _={ fmt.Sprintf("on htmx:afterRequest remove #channel-tile-%s", channel.ID) }
				class="absolute inset-0 z-10 flex items-center justify-center invisible w-full text-lg font-bold uppercase bg-black bg-opacity-50 group-hover:visible group-[.htmx-request]:visible"
				hx-indicator={ fmt.Sprintf("#channel-tile-%s", channel.ID) } hx-target="#subscriptions-list" hx-swap="afterbegin"
				hx-post={ fmt.Sprintf("/api/channels/%s/subscribe", channel.ID) }>
					<span class="loading loading-spinner invisible group-[.htmx-request]:visible"></span>
					<span class="group-[.htmx-request]:hidden">
						Subscribe
					</span>
				</button>
			}
			@ChannelTile(channel.Channel)
		</div>
	}
}

// {{ define "components/search-channels-tiled" }}
// {{ with . }}
// {{ range . }}
// {{ end }}
// {{ end }}
// {{ end }}

// {{ define "components/subs-channels-tile" }}
// <div class="relative flex-grow p-4 overflow-hidden group md:basis-1/3 rounded-xl bg-base-300"
//   id="sub-channel-tile-{{.ID}}">
//   <button type="button"
//     class="absolute inset-0 z-10 flex items-center justify-center invisible w-full text-lg font-bold uppercase bg-black bg-opacity-50 group-hover:visible"
//     hx-target="#sub-channel-tile-{{.ID}}" hx-swap="delete" hx-post="/api/channels/{{.ID}}/unsubscribe"
//     _="on htmx:afterRequest send clear to #search-box">
//     unsubscribe
//   </button>
//   {{ template "components/channel-tile" . }}
// </div>
// {{ end }}

// {{ define "components/subs-channels-tiled" }}
// {{ with . }}
// {{ range . }}
// {{ template "components/subs-channels-tile" . }}
// {{ end }}
// {{ end }}
// {{ end }}

