package partials

import "github.com/cufee/feedlr-yt/internal/templates/components/shared"
import "github.com/cufee/feedlr-yt/internal/templates/components/icons"

templ Navbar(...templ.Component) {
	<div id="components-navbar" hx-boost="true" hx-push-url="true" hx-indicator="#nav-indicator" hx-target="#main" hx-swap="innerHTML" _="on htmx:beforeSend add @disabled=&#39;true&#39; to .nav-btn then on htmx:afterRequest remove @disabled from .nav-btn">
		<div id="nav-indicator" class="flex flex-row items-center justify-between gap-2 pt-2 md:pt-2 group">
			@navProgress()
			<div class="flex flex-row gap-2"><a href="/app" class="relative">@shared.Logo("64")</a></div>
			<div class="flex flex-row items-center gap-2"><a class="btn btn-neutral nav-btn" href="/app/subscriptions" title="Manage Subscriptions">Subscriptions</a> <a class="btn btn-neutral btn-square nav-btn" href="/app/settings" title="App Settings">@icons.Settings()</a></div>
		</div>
	</div>
}

templ SimpleNavbar(...templ.Component) {
	<div id="components-navbar" hx-boost="true" hx-push-url="true" hx-indicator="#nav-indicator" hx-target="#main" hx-swap="innerHTML" _="on htmx:beforeSend add @disabled=&#39;true&#39; to .nav-btn then on htmx:afterRequest remove @disabled from .nav-btn">
		<div id="nav-indicator" class="flex flex-row items-center justify-between gap-2 py-2 group">
			@navProgress()
			<div class="absolute top-0 left-0 w-full"><progress id="nav-progress" class="invisible h-1 rounded-none opacity-75 progress progress-info" value="0" max="100"></progress></div>
			<a href="/app" class="relative">@shared.Logo("64")</a>
		</div>
	</div>
}

templ navProgress() {
	<div class="absolute top-0 left-0 w-full">
		<div id="nav-progress" class="invisible h-1 transition-all bg-primary rounded-r-full duration-[50ms] ease-in" style="width: 0%"></div>
	</div>
	@shared.EmbedMinifiedScript(animateNavProgress())
}

script animateNavProgress() {
	const navbar = document.getElementById('components-navbar');
	const progressBar = document.getElementById('nav-progress');
	const progressBaseStep = 5;

	const progressRandomStep = () => {
		return Math.floor(progressBaseStep * Math.random()) + progressBaseStep;
	}
	const progressSlowStep = () => {
		return Math.floor(Math.random() * 2);
	}
	
	navbar.addEventListener('load', () => {
		progressBar.value = 0;
		progressBar.style.width = progressBar.value + "%"
		progressBar.classList.add('invisible');
		document.querySelectorAll('.nav-btn').forEach((btn) => {
			btn.removeAttribute('disabled');
		});
		if (stopAnimation) {
			clearInterval(stopAnimation);
			stopAnimation = null;
		}
	});
	
	navbar.addEventListener('htmx:afterRequest', () => {
		setTimeout(() => {
			progressBar.classList.add('invisible');
			progressBar.value = 0;
			progressBar.style.width = progressBar.value + "%"
		}, 250);
		progressBar.value = 100;
		progressBar.style.width = progressBar.value + "%"
		if (stopAnimation) {
			clearInterval(stopAnimation);
			stopAnimation = null;
		}
	});

	let stopAnimation;
	navbar.addEventListener('htmx:beforeSend', () => {
		progressBar.value = progressRandomStep()
		progressBar.style.width = progressBar.value + "%"
		progressBar.classList.remove('invisible');

		stopAnimation = setInterval(() => {
			if (progressBar.value <= 65) {
				progressBar.value += progressRandomStep()
				progressBar.style.width = progressBar.value + "%"
			} else if (progressBar.value <= 85) {
				progressBar.value += progressSlowStep()
				progressBar.style.width = progressBar.value + "%"
			} else if (progressBar.value <= 95){
				progressBar.value += 1
				progressBar.style.width = progressBar.value + "%"
			}
		}, 50);
	});
}

