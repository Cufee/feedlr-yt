package app

import (
	"fmt"
	"github.com/byvko-dev/youtube-app/internal/types"
	"github.com/byvko-dev/youtube-app/internal/templates/components/icons"
)

templ AppHome(props types.UserSubscriptionsFeedProps) {
	<head><title>Feedlr - Subscriptions</title></head>

	<div id="app-index" class="flex flex-col gap-4">
		@ChannelsFeed(props.Favorites)
		@ChannelsFeed(props.WithNewVideos)

		if len(props.WithoutNewVideos) > 0 {
			<div class="relative flex flex-col items-center justify-start min-h-screen gap-1 text-center">
				if len(props.WithNewVideos) > 0 || len(props.Favorites) > 0 {
					<span class="text-2xl font-bold md:text-3xl">All caught up!</span>
					<span class="sticky top-0 text-lg">Keep scrolling to see the rest of your subscriptions</span>
				} else {
					<span class="text-2xl font-bold md:text-3xl">There are no new videos just yet!</span>
					<span class="sticky top-0 text-lg">Keep scrolling to see your subscriptions</span>
				}
			</div>
		}

		@ChannelsFeed(props.WithoutNewVideos)
	</div>
}

templ ChannelsFeed(channels []types.ChannelWithVideosProps) {
	<div class="flex flex-col gap-4" id="components-channels-feed">
		for _, channel := range channels {
			<div id={ channel.ID }>
				<div class="flex flex-col gap-2 p-3 shadow-inner md:gap-4 md:p-6 bg-base-300 rounded-xl">
					<div class="flex flex-row items-center justify-between gap-2">
						<div class="flex flex-row items-center gap-1">
							<img src={ channel.Thumbnail } alt={ channel.Title } class="object-cover w-6 h-6 md:w-8 md:h-8 rounded-xl"/>
							<span class="mx-2 text-xl font-bold md:text-2xl">{ channel.Title }</span>
						</div>
						@ChannelFavoriteButton(channel.ID, channel.Favorite)
					</div>
					
					if len(channel.Videos) > 0 {
						@VideoFeed(channel.Videos)
					} else {
						<div class="flex items-center justify-center flex-grow h-44 md:h-60">
							<span class="text-xl font-bold text-center md:text-2xl">There are no videos from { channel.Title } just yet</span>
						</div>
					}
				</div>
			</div>
		}
	</div>
}

templ ChannelTile(channel types.ChannelWithVideosProps) {
	<div class="flex flex-row items-center h-24 gap-2">
		<img class="object-cover h-full rounded-lg" src={ channel.Thumbnail } alt={ channel.Title }/>
		<div class="box-border flex flex-col justify-center p-2">
			<div class="text-2xl font-bold text-ellipsis">{ channel.Title }</div>
			<div class="truncate whitespace-normal line-clamp-3">
				if channel.Description != "" {
					{ channel.Description }
				} else {
					We don't know much about them, but we're sure they are great.
				}
			</div>
		</div>
	</div>
}

templ ChannelFavoriteButton(id string, favorite bool) {
	<button class="btn btn-sm btn-ghost btn-square" hx-post="/api/channels/.ID/favorite" id="favorite-channel-button">
		if favorite {
			<span class="text-yellow-500 hover:text-neutral-content">@icons.Bookmark()</span>
		} else {
			<span class="hover:text-yellow-500">@icons.Bookmark()</span>
		}
	</button>
}

templ VideoFeed(videos []types.VideoProps) {
	<div class="flex flex-row w-full gap-1 p-0 space-x-2 overflow-scroll shadow-inner md:space-x-4 carousel carousel-center rounded-box" id="components-video-feed">
		for _, video := range videos {
			@VideoTile(video)
		}
	</div>
}

templ VideoTile(video types.VideoProps) {
	<div class="relative overflow-hidden shadow-md carousel-item rounded-xl overscroll-contain" id={ fmt.Sprintf("video-tile-%s", video.ID) }>
		if video.Progress < 1 {
			<button class="absolute z-10 btn btn-dark btn-square opacity-70 hover:opacity-100 md:btn-sm top-2 right-2" title="Mark as watched" hx-post={ fmt.Sprintf("/api/videos/%s/progress?progress=1", video.ID) } hx-swap="outerHTML" hx-target={ fmt.Sprintf("#video-tile-%s", video.ID) } hx-indicator={ fmt.Sprintf("#video-tile-%s-indicator", video.ID) }>
			  @icons.Check()
			</button>
		} else {
			<button class="absolute z-20 btn btn-dark btn-square opacity-70 hover:opacity-100 md:btn-sm top-2 right-2" title="Mark as unwatched" hx-post={ fmt.Sprintf("/api/videos/%s/progress?progress=0", video.ID) } hx-swap="outerHTML" hx-target={ fmt.Sprintf("#video-tile-%s", video.ID) } hx-indicator={ fmt.Sprintf("#video-tile-%s-indicator", video.ID) }>
				@icons.Refresh()
			</button>
		}
		<a href={ templ.URL(fmt.Sprintf("/video/%s", video.ID)) } class="relative group">
			<div class="absolute z-20 top-2 left-2 htmx-indicator" id={ fmt.Sprintf("video-tile-%s-indicator", video.ID) }>
				<span class="loading loading-spinner loading-lg md:loading-sm"></span>
			</div>
			if video.Progress > 0 {
				<div class="absolute top-0 left-0 z-10 flex items-center justify-center w-full h-full text-4xl font-bold uppercase bg-black opacity-70 md:text-6xl">Watched</div>
			}
			<img class="object-cover transition-all duration-500 cursor-pointer aspect-video h-44 md:h-60 group-hover:scale-110" src={ video.Thumbnail } alt={ video.Title }/>
			<div class="absolute bottom-0 left-0 w-full p-1 font-bold text-center text-white truncate bg-black md:hidden group-hover:inline-block animate__faster bg-opacity-60 animate__animated animate__slideInUp">
				{ video.Title }
			</div>
		</a>
	</div>
}

