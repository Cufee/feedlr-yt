package app

import (
	"github.com/cufee/feedlr-yt/internal/templates/components/settings"
	"github.com/cufee/feedlr-yt/internal/types"
)

templ Settings(props types.SettingsPageProps) {
	<head><title>Feedlr - Settings</title></head>
	<div class="flex flex-col gap-4">
		@ManageAccount()
		@settings.SponsorBlockSettings(props.SponsorBlock)
	</div>
}

templ ManageAccount() {
	<div class="flex flex-col w-full gap-4 p-3 shadow-inner md:gap-4 md:p-6 bg-base-300 rounded-xl" id="manage-account">
		<div class="flex flex-row items-center w-full gap-2 px-4">
			<span class="self-center text-xl font-bold">Account</span>
		</div>
		<div class="flex flex-col gap-2 rounded-lg bg-base-100 p-4 flex-grow w-full">
			<div class="flex items-center justify-between gap-2">
				<span class="font-bold">Passkeys</span>
				<button id="addPasskey" type="button" class="btn btn-sm btn-primary">Add a new passkey</button>
			</div>
			<div class="flex flex-row flex-wrap gap-2">
				<span id="error" class="label-text-alt"></span>
			</div>
		</div>
	</div>
	<script>
		document.getElementById('addPasskey').addEventListener('click', register);

		function showMessage(message, isError = false) {
				const input = document.getElementById('error');
				input.innerHTML = message
		}

		async function register() {
				try {
						// Get registration options from your server. Here, we also receive the challenge.
						const response = await fetch('/api/passkeys/add/begin', { method: 'POST' });

						// Check if the registration options are ok.
						if (!response.ok) {
								const msg = await response.text();
								throw new Error('User already exists or failed to get registration options from server: ' + msg);
						}

						// Convert the registration options to JSON.
						const options = await response.json();

						// This triggers the browser to display the passkey / WebAuthn modal (e.g. Face ID, Touch ID, Windows Hello).
						// A new attestation is created. This also means a new public-private-key pair is created.
						const attestationResponse = await SimpleWebAuthnBrowser.startRegistration(options.publicKey);

						// Send attestationResponse back to server for verification and storage.
						const verificationResponse = await fetch('/api/passkeys/add/finish', {
								method: 'POST',
								credentials: 'same-origin',
								headers: {
										'Content-Type': 'application/json',
								},
								body: JSON.stringify(attestationResponse)
						});


						const msg = await verificationResponse.text();
						if (verificationResponse.ok) {
								showMessage("Passkey registered", false);
						} else {
								showMessage(msg, true);
						}
				} catch
						(error) {
						showMessage('Error: ' + error.message, true);
				}
		}
	</script>
	<script src="/assets/js/index.es5.umd.min.js" async></script>
}
