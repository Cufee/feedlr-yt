package pages

import "github.com/cufee/feedlr-yt/internal/templates/components/shared"

templ Login() {
	<div class="flex flex-col items-center justify-center h-full gap-4 text-center" id="landing">
		<a href="/">
			@shared.Logo("text-2xl")
		</a>
		<div class="flex flex-col gap-2 w-xs">
			<div>
				We use passkeys exclusively.
			</div>
			<div>
				<input id="username" minlength="3" maxlength="24" type="text" class="w-full input input-bordered" placeholder="Username"/>
			</div>
			<div class="flex flex-row flex-wrap gap-2">
				<button id="loginButton" type="button" class="grow basis-1/3 btn btn-primary">Login</button>
				<button id="registerButton" type="button" class="grow basis-1/3 btn">Register</button>
			</div>
			<div id="error" class="toast toast-bottom toast-center invisible max-w-xl">
				<div class="alert alert-error">
					<span></span>
				</div>
			</div>
		</div>
	</div>
	<script>
		document.getElementById('registerButton').addEventListener('click', register);
		document.getElementById('loginButton').addEventListener('click', login);
		document.getElementById('username').addEventListener('keyup', (e) => {
          if (e.keyCode === 13 && e.target.value?.length > 3) login();
		});
		document.getElementById('username').addEventListener('input', (e) => {
		  document.getElementById('error').classList.add("invisible")
		});

		function showMessage(message, isError = false) {
				const alert = document.getElementById('error');
				alert.querySelector("span").innerText = message
				alert.classList.remove("invisible")
		}

		async function register() {
				// Retrieve the username from the input field
				const username = document.getElementById('username').value;

				try {
						// Get registration options from your server. Here, we also receive the challenge.
						const response = await fetch('/register/begin', {
								method: 'POST', headers: {'Content-Type': 'application/json'},
								body: JSON.stringify({username: username})
						});

						// Check if the registration options are ok.
						if (!response.ok) {
								const msg = await response.text();
								throw new Error(msg|| 'Failed to get registration options from server');
						}

						// Convert the registration options to JSON.
						const options = await response.json();

						// This triggers the browser to display the passkey / WebAuthn modal (e.g. Face ID, Touch ID, Windows Hello).
						// A new attestation is created. This also means a new public-private-key pair is created.
						const attestationResponse = await SimpleWebAuthnBrowser.startRegistration(options.publicKey);

						// Send attestationResponse back to server for verification and storage.
						const verificationResponse = await fetch('/register/finish', {
								method: 'POST',
								credentials: 'same-origin',
								headers: {
										'Content-Type': 'application/json',
								},
								body: JSON.stringify(attestationResponse)
						});


						const msg = await verificationResponse.text();
						if (verificationResponse.ok) {
								showMessage(msg, false);
								window.location.href = "/app";
						} else {
								showMessage(msg, true);
						}
				} catch
						(error) {
						showMessage('Error: ' + error.message, true);
				}
		}

		async function login() {
				// Retrieve the username from the input field
				const username = document.getElementById('username').value;

				try {
						// Get login options from your server. Here, we also receive the challenge.
						const response = await fetch('/login/begin', {
								method: 'POST', headers: {'Content-Type': 'application/json'},
								body: JSON.stringify({username: username})
						});
						// Check if the login options are ok.
						if (!response.ok) {
								const msg = await response.text();
								throw new Error(msg || 'Failed to get login options from server');
						}
						// Convert the login options to JSON.
						const options = await response.json();

						// This triggers the browser to display the passkey / WebAuthn modal (e.g. Face ID, Touch ID, Windows Hello).
						// A new assertionResponse is created. This also means that the challenge has been signed.
						const assertionResponse = await SimpleWebAuthnBrowser.startAuthentication(options.publicKey);

						// Send assertionResponse back to server for verification.
						const verificationResponse = await fetch('/login/finish', {
								method: 'POST',
								credentials: 'same-origin',
								headers: {
										'Content-Type': 'application/json',
								},
								body: JSON.stringify(assertionResponse)
						});

						const msg = await verificationResponse.text();
						if (verificationResponse.ok) {
								showMessage(msg, false);
								window.location.href = "/app";
						} else {
								showMessage(msg, true);
						}
				} catch (error) {
						showMessage('Error: ' + error.message, true);
				}
		}
	</script>
	<script src="https://unpkg.com/@simplewebauthn/browser/dist/bundle/index.umd.min.js"></script>
}
