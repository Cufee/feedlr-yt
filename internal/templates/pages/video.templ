package pages

import (
	"fmt"
	"github.com/cufee/feedlr-yt/internal/templates/components/icons"
	"github.com/cufee/feedlr-yt/internal/templates/components/shared"
	"github.com/cufee/feedlr-yt/internal/types"
	"github.com/sosodev/duration"
	"time"
)

func durationToString(videoDuration int) string {
	d := duration.FromTimeDuration(time.Duration(videoDuration))
	if d == nil {
		return ""
	}
	return d.String()
}

templ Video(props types.VideoPlayerProps) {
	<div class="relative flex flex-col items-center justify-center grow">
		<div class="grow w-full flex flex-col relative">
			<div class="absolute flex items-center justify-center w-full h-full bg-black" id="player-loading"><span class="w-12 h-12 loading loading-spinner"></span></div>
			@videoPlayer(props)
		</div>
		<div class="w-full flex gap-2 p-2 bg-black justify-between">
			<div class="flex gap-2">
				@buttonChannel(props.Video.Channel.ID)
				@buttonShare(props.Video.ID)
			</div>
			<div class="flex gap-2">
				if (props.Authenticated) {
					@buttonBack(props.ReturnURL)
				} else {
					@buttonLogin()
				}
			</div>
		</div>
		<div id="notification-toast" class="opacity-0 pointer-events-none">
			@notificationToast("SponsorBlock skipped a video segment")
		</div>
	</div>
	@shared.EmbedScript(hotkeyScript(props.ReturnURL), props.ReturnURL)
}

templ videoPlayer(player types.VideoPlayerProps) {
	<div id="player" class="grow overflow-hidden"></div>
	<script id="" src="https://www.youtube.com/iframe_api"></script>
	@shared.EmbedScript(sponsorBlockInit(player.SkipSegments), player.SkipSegments)
	@shared.EmbedScript(youtubePlayerInit(player.Video.Channel.ID, player.Video.ID, player.Video.Progress, player.PlayerVolumeLevel, player.ReportProgress), player.Video.Channel.ID, player.Video.ID, player.Video.Progress, player.PlayerVolumeLevel, player.ReportProgress)
}

templ buttonChannel(id string) {
	<a href={ templ.URL(fmt.Sprintf("/channel/%s", id)) } class="opacity-75 hover:opacity-100 btn btn-square">
		@icons.Profile()
	</a>
}

templ buttonShare(id string) {
	<button id="share-video-link-btn" class="opacity-75 hover:opacity-100 btn btn-square">
		@icons.Share()
	</button>
	@shared.EmbedScript(shareButtonScript(id), id)
}

templ buttonViewOnYoutube(id string) {
	<a href={ templ.URL("https://youtube.com/watch?from=feedler.app&v=" + id) } target="_blank" id="view-on-youtube" class="opacity-75 hover:opacity-100 btn btn-square">
		<div class="border border-neutral-content rounded-lg px-1.5 py-0.5 pl-2">
			@icons.Play()
		</div>
	</a>
}

script shareButtonScript(id string) {
	const link = window.location.origin + "/video/" + id
	document.getElementById("share-video-link-btn").addEventListener("click", () => {
		if (!navigator.share) {
			navigator.clipboard.writeText(link);
			return
		}
		navigator.share({
			title: document.title,
			url: link
		})
	})
}

templ buttonLogin() {
	<a class="opacity-75 close-button hover:opacity-100 btn btn-primary" href="/login" id="close-button">Login</a>
}

templ buttonBack(url string) {
	<a class="opacity-75 close-button hover:opacity-100 btn btn-primary btn-square" href={ templ.URL(url) } id="close-button">
		@icons.Cross()
	</a>
}

templ notificationToast(message string) {
	<div class="toast toast-center toast-bottom">
		<div class="px-3 py-2 alert alert-info opacity-80"><span>{ message }</span></div>
	</div>
}

script hotkeyScript(returnUrl string) {
	window.addEventListener("keydown", (event) => {
		if (event.keyCode === 27) {
			event.preventDefault()
			document.getElementById("player-loading").classList.remove("hidden")
			if (window.feedlr_player) {
				window.feedlr_player.pauseVideo()
			}
			window.location.href = window.location.origin + returnUrl
			setTimeout(() => {
				window.location.href = window.location.origin + returnUrl
			}, 250)
			return false
		}
		// Check if the player exists
		if (!window.feedlr_player) {
			return
		}
		// Check all mod keys
		for (const k of ["Alt", "AltGraph", "Control", "Meta"]) {
			if (event.getModifierState(k) === true) return
		}

		// Play/Pause
		if (event.keyCode === 32) {
			event.preventDefault()
			if (window.feedlr_player.getPlayerState() === 1) {
				window.feedlr_player.pauseVideo()
			} else {
				window.feedlr_player.playVideo()
			}
		}
		// Seek 5 seconds
		if (event.keyCode === 37) {
			event.preventDefault()
			window.feedlr_player.seekTo(window.feedlr_player.getCurrentTime() - 5, true)
		}
		if (event.keyCode === 39) {
			event.preventDefault()
			window.feedlr_player.seekTo(window.feedlr_player.getCurrentTime() + 5, true)
		}
		// Volume
		if (event.keyCode === 38) {
			event.preventDefault()
			window.feedlr_player.setVolume(window.feedlr_player.getVolume() + 5)
		}
		if (event.keyCode === 40) {
			event.preventDefault()
			window.feedlr_player.setVolume(window.feedlr_player.getVolume() - 5)
		}
	})
}

script youtubePlayerInit(channel string, video string, progress, volume int, withProgress bool) {
	if (withProgress) {
		setTimeout(() => {
			document.querySelector("#close-button").addEventListener("click", saveProgress);
		}, 100)
		setInterval(saveProgress, 10000)
	}
	let player;
	var frame = document.getElementById("player")
	const waitForYT = setInterval(() => {
		if (typeof YT !== 'undefined' && YT.loaded === 1) {
			clearInterval(waitForYT);
			player = new YT.Player(frame, {
				height: '100%',
				width: '100%',
				videoId: video,
				playerVars: {
					'start': progress,
					'rel': 0,
					'autoplay': 1,
					'playsinline': 1,
					'enablejsapi': 1,
					'iv_load_policy': 3
				},
				events: {
					'onReady': onPlayerReady,
					'onStateChange': onPlayerStateChange
				}
			})
			window.feedlr_player = player
		}
	}, 100)

	function onPlayerReady(event) {
		document.getElementById("player-loading").classList.add("hidden")
		const volume = parseInt(window.localStorage.getItem(`player-volume-${channel}`) || window.localStorage.getItem("player-volume"))
		if (Number.isInteger(volume) && volume > 0) window.feedlr_player.setVolume(volume)
	}
	function onPlayerStateChange(event) {
		withProgress && saveProgress()
		if ([0, 2].includes(event.data)) {
			window.focus() // Focus the window when the video ends or is paused to allow hotkeys to work
		}
	}
	let lastProgress = 0
	function saveProgress() {
		if (!window.feedlr_player) return;
		const currentVolume = Math.floor(window.feedlr_player.getVolume())
		if (currentVolume > 0) {
			window.localStorage.setItem("player-volume", currentVolume)
			window.localStorage.setItem(`player-volume-${channel}`, currentVolume)
		}
		const currentTime = Math.floor(window.feedlr_player.getCurrentTime())
		if (lastProgress === currentTime) {
			return true
		}
		lastProgress = currentTime
		fetch(`/api/videos/${video}/progress?progress=${currentTime}`, {
			method: 'POST',
			credentials: 'include'
		}).catch(e => console.error(e))
		return true
	}
}

script sponsorBlockInit(segments []types.SegmentProps) {
  setTimeout(() => { document.getElementById("notification-toast")?.classList.add("transition-all", "duration-[500ms]", "ease-out") }, 501)
	if (segments && segments.length > 0) {
		setInterval(() => {
			if (window.feedlr_player && window.feedlr_player.getPlayerState && window.feedlr_player.getPlayerState() === 1) {
				var currentTime = window.feedlr_player.getCurrentTime()
				var segment = segments.find(segment => segment.start <= currentTime && segment.end >= currentTime)
				if (segment) {
					window.feedlr_player.seekTo(segment.end, true)
					document.getElementById("notification-toast")?.classList.remove("opacity-0")
					setTimeout(() => document.getElementById("notification-toast")?.classList.add("opacity-0"), 1500)
				}
			}
		}, 1000)
	}
}
