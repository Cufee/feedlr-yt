// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// View is an object representing the database table.
type View struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	VideoID   string    `boil:"video_id" json:"video_id" toml:"video_id" yaml:"video_id"`
	Progress  int64     `boil:"progress" json:"progress" toml:"progress" yaml:"progress"`
	Hidden    null.Bool `boil:"hidden" json:"hidden,omitempty" toml:"hidden" yaml:"hidden,omitempty"`

	R *viewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L viewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ViewColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	UserID    string
	VideoID   string
	Progress  string
	Hidden    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	UserID:    "user_id",
	VideoID:   "video_id",
	Progress:  "progress",
	Hidden:    "hidden",
}

var ViewTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	UserID    string
	VideoID   string
	Progress  string
	Hidden    string
}{
	ID:        "views.id",
	CreatedAt: "views.created_at",
	UpdatedAt: "views.updated_at",
	UserID:    "views.user_id",
	VideoID:   "views.video_id",
	Progress:  "views.progress",
	Hidden:    "views.hidden",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ViewWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	UserID    whereHelperstring
	VideoID   whereHelperstring
	Progress  whereHelperint64
	Hidden    whereHelpernull_Bool
}{
	ID:        whereHelperstring{field: "\"views\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"views\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"views\".\"updated_at\""},
	UserID:    whereHelperstring{field: "\"views\".\"user_id\""},
	VideoID:   whereHelperstring{field: "\"views\".\"video_id\""},
	Progress:  whereHelperint64{field: "\"views\".\"progress\""},
	Hidden:    whereHelpernull_Bool{field: "\"views\".\"hidden\""},
}

// ViewRels is where relationship names are stored.
var ViewRels = struct {
	Video string
	User  string
}{
	Video: "Video",
	User:  "User",
}

// viewR is where relationships are stored.
type viewR struct {
	Video *Video `boil:"Video" json:"Video" toml:"Video" yaml:"Video"`
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*viewR) NewStruct() *viewR {
	return &viewR{}
}

func (r *viewR) GetVideo() *Video {
	if r == nil {
		return nil
	}
	return r.Video
}

func (r *viewR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// viewL is where Load methods for each relationship are stored.
type viewL struct{}

var (
	viewAllColumns            = []string{"id", "created_at", "updated_at", "user_id", "video_id", "progress", "hidden"}
	viewColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "user_id", "video_id", "progress"}
	viewColumnsWithDefault    = []string{"hidden"}
	viewPrimaryKeyColumns     = []string{"id"}
	viewGeneratedColumns      = []string{}
)

type (
	// ViewSlice is an alias for a slice of pointers to View.
	// This should almost always be used instead of []View.
	ViewSlice []*View
	// ViewHook is the signature for custom View hook methods
	ViewHook func(context.Context, boil.ContextExecutor, *View) error

	viewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	viewType                 = reflect.TypeOf(&View{})
	viewMapping              = queries.MakeStructMapping(viewType)
	viewPrimaryKeyMapping, _ = queries.BindMapping(viewType, viewMapping, viewPrimaryKeyColumns)
	viewInsertCacheMut       sync.RWMutex
	viewInsertCache          = make(map[string]insertCache)
	viewUpdateCacheMut       sync.RWMutex
	viewUpdateCache          = make(map[string]updateCache)
	viewUpsertCacheMut       sync.RWMutex
	viewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var viewAfterSelectMu sync.Mutex
var viewAfterSelectHooks []ViewHook

var viewBeforeInsertMu sync.Mutex
var viewBeforeInsertHooks []ViewHook
var viewAfterInsertMu sync.Mutex
var viewAfterInsertHooks []ViewHook

var viewBeforeUpdateMu sync.Mutex
var viewBeforeUpdateHooks []ViewHook
var viewAfterUpdateMu sync.Mutex
var viewAfterUpdateHooks []ViewHook

var viewBeforeDeleteMu sync.Mutex
var viewBeforeDeleteHooks []ViewHook
var viewAfterDeleteMu sync.Mutex
var viewAfterDeleteHooks []ViewHook

var viewBeforeUpsertMu sync.Mutex
var viewBeforeUpsertHooks []ViewHook
var viewAfterUpsertMu sync.Mutex
var viewAfterUpsertHooks []ViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *View) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *View) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *View) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *View) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *View) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *View) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *View) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *View) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *View) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddViewHook registers your hook function for all future operations.
func AddViewHook(hookPoint boil.HookPoint, viewHook ViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		viewAfterSelectMu.Lock()
		viewAfterSelectHooks = append(viewAfterSelectHooks, viewHook)
		viewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		viewBeforeInsertMu.Lock()
		viewBeforeInsertHooks = append(viewBeforeInsertHooks, viewHook)
		viewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		viewAfterInsertMu.Lock()
		viewAfterInsertHooks = append(viewAfterInsertHooks, viewHook)
		viewAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		viewBeforeUpdateMu.Lock()
		viewBeforeUpdateHooks = append(viewBeforeUpdateHooks, viewHook)
		viewBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		viewAfterUpdateMu.Lock()
		viewAfterUpdateHooks = append(viewAfterUpdateHooks, viewHook)
		viewAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		viewBeforeDeleteMu.Lock()
		viewBeforeDeleteHooks = append(viewBeforeDeleteHooks, viewHook)
		viewBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		viewAfterDeleteMu.Lock()
		viewAfterDeleteHooks = append(viewAfterDeleteHooks, viewHook)
		viewAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		viewBeforeUpsertMu.Lock()
		viewBeforeUpsertHooks = append(viewBeforeUpsertHooks, viewHook)
		viewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		viewAfterUpsertMu.Lock()
		viewAfterUpsertHooks = append(viewAfterUpsertHooks, viewHook)
		viewAfterUpsertMu.Unlock()
	}
}

// One returns a single view record from the query.
func (q viewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*View, error) {
	o := &View{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for views")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all View records from the query.
func (q viewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ViewSlice, error) {
	var o []*View

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to View slice")
	}

	if len(viewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all View records in the query.
func (q viewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count views rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q viewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if views exists")
	}

	return count > 0, nil
}

// Video pointed to by the foreign key.
func (o *View) Video(mods ...qm.QueryMod) videoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VideoID),
	}

	queryMods = append(queryMods, mods...)

	return Videos(queryMods...)
}

// User pointed to by the foreign key.
func (o *View) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadVideo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadVideo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		args[object.VideoID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			args[obj.VideoID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`videos`),
		qm.WhereIn(`videos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Video")
	}

	var resultSlice []*Video
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Video")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Video = foreign
		if foreign.R == nil {
			foreign.R = &videoR{}
		}
		foreign.R.Views = append(foreign.R.Views, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VideoID == foreign.ID {
				local.R.Video = foreign
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.Views = append(foreign.R.Views, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Views = append(foreign.R.Views, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Views = append(foreign.R.Views, local)
				break
			}
		}
	}

	return nil
}

// SetVideo of the view to the related item.
// Sets o.R.Video to related.
// Adds o to related.R.Views.
func (o *View) SetVideo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Video) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"video_id"}),
		strmangle.WhereClause("\"", "\"", 0, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VideoID = related.ID
	if o.R == nil {
		o.R = &viewR{
			Video: related,
		}
	} else {
		o.R.Video = related
	}

	if related.R == nil {
		related.R = &videoR{
			Views: ViewSlice{o},
		}
	} else {
		related.R.Views = append(related.R.Views, o)
	}

	return nil
}

// SetUser of the view to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Views.
func (o *View) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 0, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &viewR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Views: ViewSlice{o},
		}
	} else {
		related.R.Views = append(related.R.Views, o)
	}

	return nil
}

// Views retrieves all the records using an executor.
func Views(mods ...qm.QueryMod) viewQuery {
	mods = append(mods, qm.From("\"views\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"views\".*"})
	}

	return viewQuery{q}
}

// FindView retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindView(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*View, error) {
	viewObj := &View{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"views\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, viewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from views")
	}

	if err = viewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return viewObj, err
	}

	return viewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *View) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no views provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(viewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	viewInsertCacheMut.RLock()
	cache, cached := viewInsertCache[key]
	viewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			viewAllColumns,
			viewColumnsWithDefault,
			viewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(viewType, viewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(viewType, viewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"views\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"views\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into views")
	}

	if !cached {
		viewInsertCacheMut.Lock()
		viewInsertCache[key] = cache
		viewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the View.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *View) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	viewUpdateCacheMut.RLock()
	cache, cached := viewUpdateCache[key]
	viewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			viewAllColumns,
			viewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update views, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"views\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, viewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(viewType, viewMapping, append(wl, viewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update views row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for views")
	}

	if !cached {
		viewUpdateCacheMut.Lock()
		viewUpdateCache[key] = cache
		viewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q viewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for views")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for views")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ViewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, viewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in view slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all view")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *View) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no views provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(viewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	viewUpsertCacheMut.RLock()
	cache, cached := viewUpsertCache[key]
	viewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			viewAllColumns,
			viewColumnsWithDefault,
			viewColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			viewAllColumns,
			viewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert views, could not build update column list")
		}

		ret := strmangle.SetComplement(viewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(viewPrimaryKeyColumns))
			copy(conflict, viewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"views\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(viewType, viewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(viewType, viewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert views")
	}

	if !cached {
		viewUpsertCacheMut.Lock()
		viewUpsertCache[key] = cache
		viewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single View record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *View) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no View provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), viewPrimaryKeyMapping)
	sql := "DELETE FROM \"views\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from views")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for views")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q viewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no viewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from views")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for views")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ViewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(viewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"views\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, viewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from view slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for views")
	}

	if len(viewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *View) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindView(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ViewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ViewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"views\".* FROM \"views\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, viewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ViewSlice")
	}

	*o = slice

	return nil
}

// ViewExists checks if the View row exists.
func ViewExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"views\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if views exists")
	}

	return exists, nil
}

// Exists checks if the View row exists.
func (o *View) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ViewExists(ctx, exec, o.ID)
}
