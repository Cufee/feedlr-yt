// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthNonces(t *testing.T) {
	t.Parallel()

	query := AuthNonces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthNoncesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthNoncesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthNonces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthNoncesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthNonceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthNoncesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthNonceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuthNonce exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthNonceExists to return true, but got false.")
	}
}

func testAuthNoncesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authNonceFound, err := FindAuthNonce(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if authNonceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthNoncesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthNonces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthNoncesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthNonces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthNoncesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authNonceOne := &AuthNonce{}
	authNonceTwo := &AuthNonce{}
	if err = randomize.Struct(seed, authNonceOne, authNonceDBTypes, false, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}
	if err = randomize.Struct(seed, authNonceTwo, authNonceDBTypes, false, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authNonceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authNonceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthNonces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthNoncesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authNonceOne := &AuthNonce{}
	authNonceTwo := &AuthNonce{}
	if err = randomize.Struct(seed, authNonceOne, authNonceDBTypes, false, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}
	if err = randomize.Struct(seed, authNonceTwo, authNonceDBTypes, false, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authNonceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authNonceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authNonceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func authNonceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthNonce) error {
	*o = AuthNonce{}
	return nil
}

func testAuthNoncesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuthNonce{}
	o := &AuthNonce{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authNonceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthNonce object: %s", err)
	}

	AddAuthNonceHook(boil.BeforeInsertHook, authNonceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authNonceBeforeInsertHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.AfterInsertHook, authNonceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authNonceAfterInsertHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.AfterSelectHook, authNonceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authNonceAfterSelectHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.BeforeUpdateHook, authNonceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authNonceBeforeUpdateHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.AfterUpdateHook, authNonceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authNonceAfterUpdateHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.BeforeDeleteHook, authNonceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authNonceBeforeDeleteHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.AfterDeleteHook, authNonceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authNonceAfterDeleteHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.BeforeUpsertHook, authNonceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authNonceBeforeUpsertHooks = []AuthNonceHook{}

	AddAuthNonceHook(boil.AfterUpsertHook, authNonceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authNonceAfterUpsertHooks = []AuthNonceHook{}
}

func testAuthNoncesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthNoncesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authNonceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthNoncesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthNoncesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthNonceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthNoncesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthNonces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authNonceDBTypes = map[string]string{`ID`: `TEXT`, `CreatedAt`: `DATE`, `UpdatedAt`: `DATE`, `Used`: `BOOLEAN`, `ExpiresAt`: `DATE`, `Value`: `TEXT`}
	_                = bytes.MinRead
)

func testAuthNoncesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authNoncePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authNonceAllColumns) == len(authNoncePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNoncePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthNoncesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authNonceAllColumns) == len(authNoncePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthNonce{}
	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNonceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authNonceDBTypes, true, authNoncePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authNonceAllColumns, authNoncePrimaryKeyColumns) {
		fields = authNonceAllColumns
	} else {
		fields = strmangle.SetComplement(
			authNonceAllColumns,
			authNoncePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthNonceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthNoncesUpsert(t *testing.T) {
	t.Parallel()
	if len(authNonceAllColumns) == len(authNoncePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthNonce{}
	if err = randomize.Struct(seed, &o, authNonceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthNonce: %s", err)
	}

	count, err := AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authNonceDBTypes, false, authNoncePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthNonce struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthNonce: %s", err)
	}

	count, err = AuthNonces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
