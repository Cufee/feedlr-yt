// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Video is an object representing the database table.
type Video struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Title       string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Duration    int64     `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	PublishedAt time.Time `boil:"published_at" json:"published_at" toml:"published_at" yaml:"published_at"`
	Private     bool      `boil:"private" json:"private" toml:"private" yaml:"private"`
	Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	ChannelID   string    `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`

	R *videoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L videoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VideoColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Title       string
	Description string
	Duration    string
	PublishedAt string
	Private     string
	Type        string
	ChannelID   string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Title:       "title",
	Description: "description",
	Duration:    "duration",
	PublishedAt: "published_at",
	Private:     "private",
	Type:        "type",
	ChannelID:   "channel_id",
}

var VideoTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Title       string
	Description string
	Duration    string
	PublishedAt string
	Private     string
	Type        string
	ChannelID   string
}{
	ID:          "videos.id",
	CreatedAt:   "videos.created_at",
	UpdatedAt:   "videos.updated_at",
	Title:       "videos.title",
	Description: "videos.description",
	Duration:    "videos.duration",
	PublishedAt: "videos.published_at",
	Private:     "videos.private",
	Type:        "videos.type",
	ChannelID:   "videos.channel_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var VideoWhere = struct {
	ID          whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	Title       whereHelperstring
	Description whereHelperstring
	Duration    whereHelperint64
	PublishedAt whereHelpertime_Time
	Private     whereHelperbool
	Type        whereHelperstring
	ChannelID   whereHelperstring
}{
	ID:          whereHelperstring{field: "\"videos\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"videos\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"videos\".\"updated_at\""},
	Title:       whereHelperstring{field: "\"videos\".\"title\""},
	Description: whereHelperstring{field: "\"videos\".\"description\""},
	Duration:    whereHelperint64{field: "\"videos\".\"duration\""},
	PublishedAt: whereHelpertime_Time{field: "\"videos\".\"published_at\""},
	Private:     whereHelperbool{field: "\"videos\".\"private\""},
	Type:        whereHelperstring{field: "\"videos\".\"type\""},
	ChannelID:   whereHelperstring{field: "\"videos\".\"channel_id\""},
}

// VideoRels is where relationship names are stored.
var VideoRels = struct {
	Channel string
	Views   string
}{
	Channel: "Channel",
	Views:   "Views",
}

// videoR is where relationships are stored.
type videoR struct {
	Channel *Channel  `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	Views   ViewSlice `boil:"Views" json:"Views" toml:"Views" yaml:"Views"`
}

// NewStruct creates a new relationship struct
func (*videoR) NewStruct() *videoR {
	return &videoR{}
}

func (r *videoR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *videoR) GetViews() ViewSlice {
	if r == nil {
		return nil
	}
	return r.Views
}

// videoL is where Load methods for each relationship are stored.
type videoL struct{}

var (
	videoAllColumns            = []string{"id", "created_at", "updated_at", "title", "description", "duration", "published_at", "private", "type", "channel_id"}
	videoColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "title", "description", "duration", "published_at", "private", "type", "channel_id"}
	videoColumnsWithDefault    = []string{}
	videoPrimaryKeyColumns     = []string{"id"}
	videoGeneratedColumns      = []string{}
)

type (
	// VideoSlice is an alias for a slice of pointers to Video.
	// This should almost always be used instead of []Video.
	VideoSlice []*Video
	// VideoHook is the signature for custom Video hook methods
	VideoHook func(context.Context, boil.ContextExecutor, *Video) error

	videoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	videoType                 = reflect.TypeOf(&Video{})
	videoMapping              = queries.MakeStructMapping(videoType)
	videoPrimaryKeyMapping, _ = queries.BindMapping(videoType, videoMapping, videoPrimaryKeyColumns)
	videoInsertCacheMut       sync.RWMutex
	videoInsertCache          = make(map[string]insertCache)
	videoUpdateCacheMut       sync.RWMutex
	videoUpdateCache          = make(map[string]updateCache)
	videoUpsertCacheMut       sync.RWMutex
	videoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var videoAfterSelectMu sync.Mutex
var videoAfterSelectHooks []VideoHook

var videoBeforeInsertMu sync.Mutex
var videoBeforeInsertHooks []VideoHook
var videoAfterInsertMu sync.Mutex
var videoAfterInsertHooks []VideoHook

var videoBeforeUpdateMu sync.Mutex
var videoBeforeUpdateHooks []VideoHook
var videoAfterUpdateMu sync.Mutex
var videoAfterUpdateHooks []VideoHook

var videoBeforeDeleteMu sync.Mutex
var videoBeforeDeleteHooks []VideoHook
var videoAfterDeleteMu sync.Mutex
var videoAfterDeleteHooks []VideoHook

var videoBeforeUpsertMu sync.Mutex
var videoBeforeUpsertHooks []VideoHook
var videoAfterUpsertMu sync.Mutex
var videoAfterUpsertHooks []VideoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Video) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Video) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Video) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Video) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Video) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Video) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Video) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Video) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Video) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range videoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVideoHook registers your hook function for all future operations.
func AddVideoHook(hookPoint boil.HookPoint, videoHook VideoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		videoAfterSelectMu.Lock()
		videoAfterSelectHooks = append(videoAfterSelectHooks, videoHook)
		videoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		videoBeforeInsertMu.Lock()
		videoBeforeInsertHooks = append(videoBeforeInsertHooks, videoHook)
		videoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		videoAfterInsertMu.Lock()
		videoAfterInsertHooks = append(videoAfterInsertHooks, videoHook)
		videoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		videoBeforeUpdateMu.Lock()
		videoBeforeUpdateHooks = append(videoBeforeUpdateHooks, videoHook)
		videoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		videoAfterUpdateMu.Lock()
		videoAfterUpdateHooks = append(videoAfterUpdateHooks, videoHook)
		videoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		videoBeforeDeleteMu.Lock()
		videoBeforeDeleteHooks = append(videoBeforeDeleteHooks, videoHook)
		videoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		videoAfterDeleteMu.Lock()
		videoAfterDeleteHooks = append(videoAfterDeleteHooks, videoHook)
		videoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		videoBeforeUpsertMu.Lock()
		videoBeforeUpsertHooks = append(videoBeforeUpsertHooks, videoHook)
		videoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		videoAfterUpsertMu.Lock()
		videoAfterUpsertHooks = append(videoAfterUpsertHooks, videoHook)
		videoAfterUpsertMu.Unlock()
	}
}

// One returns a single video record from the query.
func (q videoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Video, error) {
	o := &Video{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for videos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Video records from the query.
func (q videoQuery) All(ctx context.Context, exec boil.ContextExecutor) (VideoSlice, error) {
	var o []*Video

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Video slice")
	}

	if len(videoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Video records in the query.
func (q videoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count videos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q videoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if videos exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *Video) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// Views retrieves all the view's Views with an executor.
func (o *Video) Views(mods ...qm.QueryMod) viewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"views\".\"video_id\"=?", o.ID),
	)

	return Views(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (videoL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		var ok bool
		object, ok = maybeVideo.(*Video)
		if !ok {
			object = new(Video)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVideo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVideo))
			}
		}
	} else {
		s, ok := maybeVideo.(*[]*Video)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVideo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVideo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		args[object.ChannelID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			args[obj.ChannelID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.Videos = append(foreign.R.Videos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.Videos = append(foreign.R.Videos, local)
				break
			}
		}
	}

	return nil
}

// LoadViews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (videoL) LoadViews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		var ok bool
		object, ok = maybeVideo.(*Video)
		if !ok {
			object = new(Video)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVideo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVideo))
			}
		}
	} else {
		s, ok := maybeVideo.(*[]*Video)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVideo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVideo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`views`),
		qm.WhereIn(`views.video_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load views")
	}

	var resultSlice []*View
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice views")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on views")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for views")
	}

	if len(viewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Views = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &viewR{}
			}
			foreign.R.Video = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VideoID {
				local.R.Views = append(local.R.Views, foreign)
				if foreign.R == nil {
					foreign.R = &viewR{}
				}
				foreign.R.Video = local
				break
			}
		}
	}

	return nil
}

// SetChannel of the video to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.Videos.
func (o *Video) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 0, videoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &videoR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			Videos: VideoSlice{o},
		}
	} else {
		related.R.Videos = append(related.R.Videos, o)
	}

	return nil
}

// AddViews adds the given related objects to the existing relationships
// of the video, optionally inserting them as new records.
// Appends related to o.R.Views.
// Sets related.R.Video appropriately.
func (o *Video) AddViews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*View) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VideoID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"views\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"video_id"}),
				strmangle.WhereClause("\"", "\"", 0, viewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VideoID = o.ID
		}
	}

	if o.R == nil {
		o.R = &videoR{
			Views: related,
		}
	} else {
		o.R.Views = append(o.R.Views, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &viewR{
				Video: o,
			}
		} else {
			rel.R.Video = o
		}
	}
	return nil
}

// Videos retrieves all the records using an executor.
func Videos(mods ...qm.QueryMod) videoQuery {
	mods = append(mods, qm.From("\"videos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"videos\".*"})
	}

	return videoQuery{q}
}

// FindVideo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVideo(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Video, error) {
	videoObj := &Video{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"videos\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, videoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from videos")
	}

	if err = videoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return videoObj, err
	}

	return videoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Video) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no videos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	videoInsertCacheMut.RLock()
	cache, cached := videoInsertCache[key]
	videoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			videoAllColumns,
			videoColumnsWithDefault,
			videoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(videoType, videoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"videos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"videos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into videos")
	}

	if !cached {
		videoInsertCacheMut.Lock()
		videoInsertCache[key] = cache
		videoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Video.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Video) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	videoUpdateCacheMut.RLock()
	cache, cached := videoUpdateCache[key]
	videoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			videoAllColumns,
			videoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update videos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"videos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, videoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, append(wl, videoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update videos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for videos")
	}

	if !cached {
		videoUpdateCacheMut.Lock()
		videoUpdateCache[key] = cache
		videoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q videoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for videos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VideoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, videoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in video slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all video")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Video) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no videos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(videoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	videoUpsertCacheMut.RLock()
	cache, cached := videoUpsertCache[key]
	videoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			videoAllColumns,
			videoColumnsWithDefault,
			videoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			videoAllColumns,
			videoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert videos, could not build update column list")
		}

		ret := strmangle.SetComplement(videoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(videoPrimaryKeyColumns))
			copy(conflict, videoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"videos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(videoType, videoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert videos")
	}

	if !cached {
		videoUpsertCacheMut.Lock()
		videoUpsertCache[key] = cache
		videoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Video record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Video) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Video provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), videoPrimaryKeyMapping)
	sql := "DELETE FROM \"videos\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for videos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q videoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no videoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for videos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VideoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(videoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"videos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, videoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from video slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for videos")
	}

	if len(videoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Video) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVideo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VideoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VideoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"videos\".* FROM \"videos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, videoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VideoSlice")
	}

	*o = slice

	return nil
}

// VideoExists checks if the Video row exists.
func VideoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"videos\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if videos exists")
	}

	return exists, nil
}

// Exists checks if the Video row exists.
func (o *Video) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VideoExists(ctx, exec, o.ID)
}
