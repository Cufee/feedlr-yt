// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVideos(t *testing.T) {
	t.Parallel()

	query := Videos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVideosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVideosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Videos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVideosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VideoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVideosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VideoExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Video exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VideoExists to return true, but got false.")
	}
}

func testVideosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	videoFound, err := FindVideo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if videoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVideosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Videos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVideosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Videos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVideosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	videoOne := &Video{}
	videoTwo := &Video{}
	if err = randomize.Struct(seed, videoOne, videoDBTypes, false, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}
	if err = randomize.Struct(seed, videoTwo, videoDBTypes, false, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = videoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = videoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Videos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVideosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	videoOne := &Video{}
	videoTwo := &Video{}
	if err = randomize.Struct(seed, videoOne, videoDBTypes, false, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}
	if err = randomize.Struct(seed, videoTwo, videoDBTypes, false, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = videoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = videoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func videoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func videoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Video) error {
	*o = Video{}
	return nil
}

func testVideosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Video{}
	o := &Video{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, videoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Video object: %s", err)
	}

	AddVideoHook(boil.BeforeInsertHook, videoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	videoBeforeInsertHooks = []VideoHook{}

	AddVideoHook(boil.AfterInsertHook, videoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	videoAfterInsertHooks = []VideoHook{}

	AddVideoHook(boil.AfterSelectHook, videoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	videoAfterSelectHooks = []VideoHook{}

	AddVideoHook(boil.BeforeUpdateHook, videoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	videoBeforeUpdateHooks = []VideoHook{}

	AddVideoHook(boil.AfterUpdateHook, videoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	videoAfterUpdateHooks = []VideoHook{}

	AddVideoHook(boil.BeforeDeleteHook, videoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	videoBeforeDeleteHooks = []VideoHook{}

	AddVideoHook(boil.AfterDeleteHook, videoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	videoAfterDeleteHooks = []VideoHook{}

	AddVideoHook(boil.BeforeUpsertHook, videoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	videoBeforeUpsertHooks = []VideoHook{}

	AddVideoHook(boil.AfterUpsertHook, videoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	videoAfterUpsertHooks = []VideoHook{}
}

func testVideosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVideosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(videoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVideoToManyViews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Video
	var b, c View

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, viewDBTypes, false, viewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, viewDBTypes, false, viewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.VideoID = a.ID
	c.VideoID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Views().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.VideoID == b.VideoID {
			bFound = true
		}
		if v.VideoID == c.VideoID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VideoSlice{&a}
	if err = a.L.LoadViews(ctx, tx, false, (*[]*Video)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Views); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Views = nil
	if err = a.L.LoadViews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Views); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVideoToManyAddOpViews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Video
	var b, c, d, e View

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, videoDBTypes, false, strmangle.SetComplement(videoPrimaryKeyColumns, videoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*View{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, viewDBTypes, false, strmangle.SetComplement(viewPrimaryKeyColumns, viewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*View{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddViews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.VideoID {
			t.Error("foreign key was wrong value", a.ID, first.VideoID)
		}
		if a.ID != second.VideoID {
			t.Error("foreign key was wrong value", a.ID, second.VideoID)
		}

		if first.R.Video != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Video != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Views[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Views[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Views().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVideoToOneChannelUsingChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Video
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, videoDBTypes, false, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChannelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Channel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VideoSlice{&local}
	if err = local.L.LoadChannel(ctx, tx, false, (*[]*Video)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Channel = nil
	if err = local.L.LoadChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVideoToOneSetOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Video
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, videoDBTypes, false, strmangle.SetComplement(videoPrimaryKeyColumns, videoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Channel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Videos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChannelID != x.ID {
			t.Error("foreign key was wrong value", a.ChannelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChannelID))
		reflect.Indirect(reflect.ValueOf(&a.ChannelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChannelID != x.ID {
			t.Error("foreign key was wrong value", a.ChannelID, x.ID)
		}
	}
}

func testVideosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVideosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VideoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVideosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Videos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	videoDBTypes = map[string]string{`ID`: `TEXT`, `CreatedAt`: `DATE`, `UpdatedAt`: `DATE`, `Title`: `TEXT`, `Description`: `TEXT`, `Duration`: `INTEGER`, `PublishedAt`: `DATE`, `Private`: `BOOLEAN`, `Type`: `TEXT`, `Thumbnail`: `TEXT`, `ChannelID`: `TEXT`}
	_            = bytes.MinRead
)

func testVideosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(videoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(videoAllColumns) == len(videoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, videoDBTypes, true, videoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVideosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(videoAllColumns) == len(videoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Video{}
	if err = randomize.Struct(seed, o, videoDBTypes, true, videoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, videoDBTypes, true, videoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(videoAllColumns, videoPrimaryKeyColumns) {
		fields = videoAllColumns
	} else {
		fields = strmangle.SetComplement(
			videoAllColumns,
			videoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VideoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVideosUpsert(t *testing.T) {
	t.Parallel()
	if len(videoAllColumns) == len(videoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Video{}
	if err = randomize.Struct(seed, &o, videoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Video: %s", err)
	}

	count, err := Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, videoDBTypes, false, videoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Video struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Video: %s", err)
	}

	count, err = Videos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
